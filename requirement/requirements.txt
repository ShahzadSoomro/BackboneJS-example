For this exercise you'll need to implement a Backbone view that displays the data associated with
 a model and enables a user to edit the associated information. You can use twitter bootstrap for
 styling and Mustache.js for templating.

 Your view will need to support two states, one to present model information and another to support
 the editing of model properties. View the attached images to see examples of what these states
 should look like.

 In general the information in the model will map directly to the information being presented in
 the view. The sample size property is one exception. The model will save three different possible
 sample sizes which correspond to three different methods of computing the sample size. The
 currently selected method is stored as a string key in the sample_size_method property. Possible
 values are 'presentations', 'participants', and 'responses', which should map to the sample sizes
 stored in the 'num_presentations', 'num_participants', and 'num_responses' properties,
 respectively.

 The type attribute is another exception. You can use the following hashmap to translate type_id
 values into actual types:
 {
 1: Categorical,
 2: Rating Scale,
 3: Time,
 4: Open Ended
 }